import { Component, OnInit } from '@angular/core';
//import Http, Response module
import { Http, Response } from '@angular/http';

@Component({
  selector: 'app-project',
  templateUrl: './project.component.html',
  styleUrls: ['./project.component.css']
})
export class ProjectComponent implements OnInit {
  //attributes:
  //project info used in the first row for adding a new project
  project:Project;
  //temp project. if you use the variable project
  projectEmpty:Project;
  //projects variable is an array of projects used to store the project information stored in the database
  projects:Project[]=[];//it must be initialized or you will get the error: Cannot read property 'push' of undefined(â€¦) in angular2
  //the constructor of the class ProjectComponent
  constructor(private http: Http) { //create the constructor for the http that we created
    this.refresh();
  }

  ngOnInit() {
  }

  refresh(){
    /*
    this.project={
      id:1,
      name:'Test Name',
      code:'TN',
      start_date:'11/05/2017',
      end_date:'06/01/2018',
      owner:'HR Department',
      description:'This project is helpful for the HR department to evualute the employees` satisfactions'
    };
    */
    this.projectEmpty={
      _id:" ",
      id:0,
      name:'',
      code:'',
      start_date:'',
      end_date:'',
      owner:'',
      description:''
    };
    this.project=this.projectEmpty;
    console.log('start get http');
    this.http.get('http://localhost:9000/projects/getall')
    .subscribe(
      (res: Response)=>{
        const p=res.json();
        this.projects=p;
      }
    ) ;
    //this.xname='term';
    //this.projects.push(this.project);
  };
  add(){
    console.log('add function');
    console.log(this.project);

    /*
    this.projects.unshift(this.project);
    this.projectEmpty={
      id:1,
      name:'',
      code:'',
      start_date:'',
      end_date:'',
      owner:'',
      description:''
    };
    this.project=this.projectEmpty;
    //return true;
    */
    //create a new json object of all fields excepts _id in order to be generated by the mongodb
    var myproject={
      id:this.project.id,
      name:this.project.name,
      code:this.project.code,
      start_date:this.project.start_date,
      end_date:this.project.end_date,
      owner:this.project.owner,
      description:this.project.description
    };
    console.log('start add http');
    this.http.post('http://localhost:9000/projects/add',myproject)
    .subscribe(
      (res: Response)=>{
        //const p=res.json();
        //this.projects=p;
        console.log(res);
        this.refresh();
      }
    ) ;
  }
  delete(_id){
    console.log('delete the code='+_id);
    /*
    for(let i =0;i<this.projects.length;i++){
      if(this.projects[i].code==code){
        this.projects.splice(i,1);//delete the project. delete from the index 1 element
      }
    }
    */
    console.log('start add http');
    this.http.delete('http://localhost:9000/projects/delete/'+_id)
    .subscribe(
      (res: Response)=>{
        //const p=res.json();
        //this.projects=p;
        console.log(res);
        this.refresh();
      }
    )  ;

  }
  update(_id){
    console.log('Update the code='+_id);
    var p:Project;
    for(let i =0;i<this.projects.length;i++){
      if(this.projects[i]._id==_id){
        p=this.projects[i];
        //this.projects.splice(i,1);//delete the project. delete from the index 1 element
      }
    }
    console.log('start add http');
    this.http.put('http://localhost:9000/projects/update/'+_id,p)
    .subscribe(
      (res: Response)=>{
        //const p=res.json();
        //this.projects=p;
        console.log(res);
        this.refresh();
      }
    );

  }
}

//Project class
interface Project{
  _id:string,
  id:number,
  name:string,
  code:string,
  start_date:string,
  end_date:string,
  owner:string,
  description:string
}
